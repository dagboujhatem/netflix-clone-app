pipeline {
	agent {
		label {
			label ''
			customWorkspace("workspace/${env.JOB_NAME}")
		}
	}

	options {
		timeout(time: 1, unit: 'HOURS')
		timestamps()
	}

	stages {
		stage('Initialisation') {
			steps {
				script {
					echo 'Récupération des numéros de version'
					// Retrieving version and revision numbers from POM file
					env.REVISION = readMavenPom().getProperties().getProperty("revision")
					env.CHANGELIST = readMavenPom().getProperties().getProperty("changelist")
					echo "${env.REVISION} et ${env.CHANGELIST}"

					if (env.CHANGELIST == "-SNAPSHOT") {
						env.DOCKER_REG_ENV = 'stages'
						if (env.BRANCH_NAME.contains('RC_') || env.BRANCH_NAME.contains('hotfix_')) {
							// We're on a branch destined to be delivered
							env.POM_VERSION = "${env.REVISION}${env.CHANGELIST}"
						} else {
							// We're on a separate branch in snapshot, use the branch name
							env.POM_VERSION = "${env.BRANCH_NAME}${env.CHANGELIST}".replace('/','_')
						}
					} else if (env.CHANGELIST == "-RELEASE") {
						env.DOCKER_REG_ENV = 'releases'
						if (env.BRANCH_NAME.contains('RC_') || env.BRANCH_NAME.contains('hotfix_')) {
							env.POM_VERSION = "${env.REVISION}${env.CHANGELIST}"
						} else {
							error "The branch cannot be a RELEASE branch, please create a RC_ or a hotfix_"
						}
					} else {
						error "The changelist must be either -SNAPSHOT or -RELEASE"
					}
				}
			}
		}
		stage('Build') {
			steps {
				echo 'Building the project...'
				 sh "mvn clean install -DskipTests"
			}
		}

		stage('Test') {
			steps {
				echo 'Running unit tests...'
				sh "mvn test"
			}
			post {
				always {
					script {
						try {
							echo 'Generating test reports'
							junit '**/target/surefire-reports/*.xml'
						} catch (Exception e) {
							echo "No test reports found. Skipping test results publishing."
						}
					}
				}
			}
		}

		stage('Static Analysis') {
			steps {
				echo 'Running static code analysis...'
			}
		}

		stage('Package') {
			steps {
				echo 'Packaging the application...'
				sh "mvn package"
				archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true // Archive les JAR
			}
		}

	}
	post {
		always {
			script{
				if (getContext(hudson.FilePath)) {
					// Suppression du workspace jenkins
					deleteDir()
					// Clean up the Docker system in order to tackle it.
					// The following command can be used to remove unused images only  (i.e. not referenced by any container) including dangling ones
					// You can use the -a flag (short for --all) as follows:
					sh("sudo sh -c 'yes | docker system prune -a'")
				}
			}
		}
	}
}
